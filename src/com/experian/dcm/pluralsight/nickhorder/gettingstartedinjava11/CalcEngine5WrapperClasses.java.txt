package com.experian.dcm.pluralsight.nickhorder.gettingstartedinjava11;

import java.util.Scanner;

public class CalcEngine5WrapperClasses {
//        public CalcEngineWrapperClasses() {
    //      }

    public static void main(String[] args) {
        double[] leftVals = new double[]{100.0, 25.0, 225.0, 11.0};
        double[] rightVals = new double[]{50.0, 92.0, 17.0, 3.0};
        char[] opCodes = new char[]{'d', 'a', 's', 'm'};
        double[] results = new double[opCodes.length];
        if (args.length == 0) {
            for(int i = 0; i < opCodes.length; ++i) {
                results[i] = execute(opCodes[i], leftVals[i], rightVals[i]);
            }

            double[] var10 = results;
            int var6 = results.length;

            for(int var7 = 0; var7 < var6; ++var7) {
                double currentResult = var10[var7];
                System.out.println(currentResult);
            }
        } else if (args.length == 1 && args[0].equals("interactive")) {
            executeInteractively();
        } else if (args.length == 3) {
            handleCommandLine(args);
        } else {
            System.out.println("Provide an operation code and 2 numeric values");
        }

    }

    static void executeInteractively() {
        System.out.println("Enter an operation and two numbers:");
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String[] parts = userInput.split(" ");
        performOperation(parts);
    }

    private static void performOperation(String[] parts) {
        char opCode = opCodeFromString(parts[0]);
        double leftVal = valueFromWord(parts[1]);
        double rightVal = valueFromWord(parts[2]);
        double result = execute(opCode, leftVal, rightVal);
        System.out.print(result);
    }

    private static void handleCommandLine(String[] args) {
        char opCode = args[0].charAt(0);
        double leftVal = Double.parseDouble(args[1]);
        double rightVal = Double.parseDouble(args[2]);
        double result = execute(opCode, leftVal, rightVal);
        System.out.println(result);
    }

    static double execute(char opCode, double leftVal, double rightVal) {
        double results;
        switch (opCode) {
            case 'a':
                results = leftVal + rightVal;
                break;
            case 'd':
                results = rightVal != 0.0 ? leftVal / rightVal : 0.0;
                break;
            case 'm':
                results = leftVal * rightVal;
                break;
            case 's':
                results = leftVal - rightVal;
                break;
            default:
                System.out.println("Invalid opCode: " + opCode);
                results = 0.0;
        }

        return results;
    }

    static char opCodeFromString(String operationName) {
        char opCode = operationName.charAt(0);
        return opCode;
    }

    static double valueFromWord(String word) {
        String[] numberWords = new String[]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        double value = -1.0;

        for(int index = 0; index < numberWords.length; ++index) {
            if (word.equals(numberWords[index])) {
                value = (double)index;
                break;
            }
        }

        if (value == -1.0) {
            Double.parseDouble(word);
        }

        return value;
    }
}
