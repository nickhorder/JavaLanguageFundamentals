package com.experian.dcm.pluralsight.nickhorder.gettingstartedinjava11;

import java.time.LocalDate;
import java.util.Scanner;

// No java path in sys variables, so will run from cmd line if I sort that out.

public class CalcEngine5Dates {
    public static void main(String[] args) {

        double[] leftVals = {100.0d, 25.0d, 225.0d, 11.0d};  // Argument1
        double[] rightVals = {50.0d, 92.0d, 17.0d, 3.0d};    // Argument2
        char[] opCodes = {'d', 'a', 's', 'm'};               // Argument3
        double[] results = new double[opCodes.length];

        if (args.length == 0) {

            for (int i = 0; i < opCodes.length; i++) {
                results[i] = execute(opCodes[i], leftVals[i], rightVals[i]);
            }

            for (double currentResult : results)
                System.out.println(currentResult);

        } else if(args.length == 1 && args[0].equals("interactive"))
            //This can be added as a CLI via Run/Edit Configurations on intelliJ
            executeInteractively();

        else if (args.length == 3)
            handleCommandLine(args);
        else
            System.out.println("Provide an operation code and 2 numeric values");
    }
    static void executeInteractively() {
        System.out.println("Enter an operation and two numbers:");
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String[] parts = userInput.split(" ");
        //Split string by spaces, with each in array 0,1,2 for e.g

        //Pass the parts array into performOperation
        performOperation(parts);
    }

    private static void performOperation(String[] parts) {
        char opCode = opCodeFromString(parts[0]);
        if(opCode == 'w')
            handleWhen(parts);
        else {
            double leftVal = valueFromWord(parts[1]);
            double rightVal = valueFromWord(parts[2]);
            double result = execute(opCode, leftVal, rightVal);
            displayResult(opCode, leftVal, rightVal, result);
        }
    }

    private static void handleWhen(String[] parts) {

        LocalDate startDate = LocalDate.parse(parts[1]);
        long daysToAdd = (long) valueFromWord(parts[2]);
        LocalDate newDate = startDate.plusDays(daysToAdd);
        String output = String.format("%s plus %d days is %s", startDate, daysToAdd, newDate);
        System.out.println(output);
    }

    private static void displayResult(char opCode, double leftVal, double rightVal, double result) {
        char symbol = symbolFromOpCode(opCode);
        /*
        StringBuilder builder = new StringBuilder(20);
        builder.append(leftVal);
        builder.append(" ");
        builder.append(symbol);
        builder.append(" ");
        builder.append(rightVal);
        builder.append(" = ");
        builder.append(result);
        System.out.println(builder.toString());

         */
        String output = String.format("%.3f %c %.3f = %.3f", leftVal, symbol, rightVal, result);
        System.out.println(output);
    }

    private static char symbolFromOpCode(char opCode) {
        char[] opCodes = {'a', 's', 'm', 'd'};
        char[] symbols = {'+', '-', '*', '/'};
        char symbol = ' ';
        for(int index = 0; index < opCodes.length; index++){
            if(opCode == opCodes[index]){
                symbol = symbols[index];
                break;
            }
        }
        return symbol;
    }

    private static void handleCommandLine(String[] args) {
        char opCode = args[0].charAt(0);
        double leftVal = Double.parseDouble(args[1]);
        double rightVal = Double.parseDouble(args[2]);

        double result = execute(opCode, leftVal, rightVal);
        System.out.println(result);
    }

    static double execute(char opCode, double leftVal, double rightVal) {
        double results;
        switch (opCode) {
            case 'a':
                results = leftVal + rightVal;
                break;
            case 's':
                results = leftVal - rightVal;
                break;
            case 'm':
                results = leftVal * rightVal;
                break;
            case 'd':
                results = rightVal != 0 ? leftVal / rightVal : 0.0d;
                break;
            default:
                System.out.println("Invalid opCode: " + opCode);
                results = 0.0d;
                break;

        }
        return results;
    }

    //Translate user input into single character
    static char opCodeFromString(String operationName){
        char opCode = operationName.charAt(0);
        return opCode;
    }
    // Return numeric value that corresponds to word user typed in
    static double valueFromWord(String word){
        String[] numberWords = {
                "zero", "one", "two", "three", "four", "five",
                "six", "seven", "eight", "nine"
        };
        double value = 0d;
        for(int index = 0; index < numberWords.length; index++){
            if(word.equals(numberWords[index])){
                value = index;
                break; //exit loop. When we match, we exit. No need to carry on.
            }
        }
        return value;
    }

}
